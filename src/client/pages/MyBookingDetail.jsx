import { useEffect, useState } from "react";
import { useParams, Link, useNavigate } from "react-router-dom";
import { apiClient } from "../../api/axios";
import { toast } from "react-toastify";

export default function MyBookingDetail() {
  const { id } = useParams(); // L·∫•y id booking t·ª´ URL
  const navigate = useNavigate();
  const [booking, setBooking] = useState(null);

  // üü¢ L·∫•y chi ti·∫øt booking c·ªßa kh√°ch h√†ng hi·ªán t·∫°i
  useEffect(() => {
    const fetchBookingDetail = async () => {
      try {
        const res = await apiClient.get(`/my-bookings/${id}`);
        setBooking(res.data);
      } catch (err) {
        console.error(err);
        toast.error("L·∫•y chi ti·∫øt ƒë·∫∑t ph√≤ng th·∫•t b·∫°i!");
        navigate("/my-bookings");
      }
    };

    fetchBookingDetail();
  }, [id, navigate]);

  const formatCurrency = (amount) =>
    Number(amount || 0).toLocaleString("vi-VN") + " ƒë";

  if (!booking) {
    return <p className="text-center mt-6">ƒêang t·∫£i chi ti·∫øt...</p>;
  }

  const deposit = Number(booking.deposit_amount || 0);
  const isPaid = booking.invoice?.status === "paid";
  const remain = isPaid
    ? 0
    : Math.max(Number(booking.total_price || 0) - deposit, 0);

  // üü¢ H√†m hi·ªÉn th·ªã tr·∫°ng th√°i ƒë·∫∑t ph√≤ng (ƒë√£ th√™m tr·∫°ng th√°i "confirmed")
  const renderBookingStatus = (status) => {
    switch (status) {
      case "pending":
        return (
          <span className="text-yellow-600 font-semibold">Ch·ªù x√°c nh·∫≠n</span>
        );
      case "confirmed":
        return (
          <span className="text-green-600 font-semibold">ƒê√£ x√°c nh·∫≠n</span>
        );
      case "completed":
        return <span className="text-green-700 font-semibold">Ho√†n th√†nh</span>;
      case "cancelled":
        return <span className="text-gray-500 font-semibold">ƒê√£ h·ªßy</span>;
      default:
        return status;
    }
  };

  return (
    <div className="p-6 max-w-3xl mx-auto">
      <h2 className="text-3xl font-bold mb-6 text-center">
        Chi ti·∫øt ƒë·∫∑t ph√≤ng
      </h2>

      <div className="bg-white shadow rounded-lg p-6 space-y-4">
        <div className="flex justify-between">
          <span className="font-semibold">Ph√≤ng:</span>
          <span>{booking.room?.room_number || "Kh√¥ng x√°c ƒë·ªãnh"}</span>
        </div>

        <div className="flex justify-between">
          <span className="font-semibold">Lo·∫°i ph√≤ng:</span>
          <span>{booking.room?.type || "Kh√¥ng x√°c ƒë·ªãnh"}</span>
        </div>

        <div className="flex justify-between">
          <span className="font-semibold">T·ªïng ti·ªÅn:</span>
          <span>{formatCurrency(booking.total_price)}</span>
        </div>

        <div className="flex justify-between">
          <span className="font-semibold">ƒê√£ c·ªçc:</span>
          <span className="text-blue-600 font-semibold">
            {formatCurrency(deposit)}
          </span>
        </div>

        <div className="flex justify-between">
          <span className="font-semibold">C√≤n l·∫°i:</span>
          <span
            className={`font-semibold ${
              remain > 0 ? "text-red-600" : "text-green-600"
            }`}
          >
            {formatCurrency(remain)}
          </span>
        </div>

        <div className="flex justify-between">
          <span className="font-semibold">Thanh to√°n:</span>
          <span
            className={`font-semibold ${
              isPaid
                ? "text-green-700"
                : booking.invoice?.status === "cancelled"
                ? "text-gray-500"
                : "text-yellow-600"
            }`}
          >
            {isPaid
              ? "ƒê√£ thanh to√°n"
              : booking.invoice?.status === "cancelled"
              ? "ƒê√£ h·ªßy"
              : "Ch∆∞a thanh to√°n"}
          </span>
        </div>

        {/* üü¢ Tr·∫°ng th√°i ƒë·∫∑t ph√≤ng */}
        <div className="flex justify-between">
          <span className="font-semibold">T√¨nh tr·∫°ng ƒë·∫∑t ph√≤ng:</span>
          {renderBookingStatus(booking.status)}
        </div>

        {/* Th√¥ng tin ng√†y nh·∫≠n/tr·∫£ */}
        <div className="flex justify-between">
          <span className="font-semibold">Ng√†y nh·∫≠n:</span>
          <span>
            {booking.checkin_date
              ? new Date(booking.checkin_date).toLocaleDateString("vi-VN")
              : "-"}
          </span>
        </div>

        <div className="flex justify-between">
          <span className="font-semibold">Ng√†y tr·∫£:</span>
          <span>
            {booking.checkout_date
              ? new Date(booking.checkout_date).toLocaleDateString("vi-VN")
              : "-"}
          </span>
        </div>

        {/* Th√¥ng tin kh√°ch h√†ng */}
        <div className="flex justify-between">
          <span className="font-semibold">Kh√°ch h√†ng:</span>
          <span>{booking.customer?.fullname || "Kh√¥ng x√°c ƒë·ªãnh"}</span>
        </div>

        <div className="flex justify-between">
          <span className="font-semibold">Email:</span>
          <span>{booking.customer?.email || "-"}</span>
        </div>

        <div className="flex justify-between">
          <span className="font-semibold">S·ªë ƒëi·ªán tho·∫°i:</span>
          <span>{booking.customer?.phone || "-"}</span>
        </div>

        {/* Danh s√°ch d·ªãch v·ª• n·∫øu c√≥ */}
        {booking.services && booking.services.length > 0 && (
          <div className="mt-4">
            <h3 className="font-semibold mb-2">D·ªãch v·ª•:</h3>
            <ul className="list-disc list-inside">
              {booking.services.map((s) => (
                <li key={s.id}>
                  {s.service_name} x {s.pivot.quantity} ={" "}
                  {formatCurrency(s.pivot.total_price)}
                </li>
              ))}
            </ul>
          </div>
        )}
      </div>

      <div className="mt-6 text-center">
        <Link
          to="/my-bookings"
          className="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600"
        >
          Quay l·∫°i danh s√°ch
        </Link>
      </div>
    </div>
  );
}
